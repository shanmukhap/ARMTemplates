<policies>
	<inbound>
		<base />
		<set-variable name="IsMockEnabled" value="@(context.Request.Headers.GetValueOrDefault("IsMockEnabled","").Contains("true"))" />
		<choose>
			<when condition="@(context.Variables.GetValueOrDefault<bool>("IsMockEnabled"))">
				<set-variable name="isSuccess" value="@(context.Request.Headers.GetValueOrDefault("ResponseStatusCode","").Contains("200"))" />
				<set-variable name="isNotFound" value="@(context.Request.Headers.GetValueOrDefault("ResponseStatusCode","").Contains("404"))" />
			    <set-variable name="isBadRequest" value="@(context.Request.Headers.GetValueOrDefault("ResponseStatusCode","").Contains("400"))" />
				<choose>
					<when condition="@(context.Variables.GetValueOrDefault<bool>("isSuccess"))">
						<return-response>
							<set-status code="200" reason="Success" />
							<set-body>{
						 "success": true,
						 "data": {
 "account": {
 "accountIdentifier": "1939704d-33d4-4e61-8758-e679e22a0000",
 "accountReferenceNumber": "JUL7231291",
 "productCode": "00001",
 "currency": "USD",
 "status": "normal",
 "statusReasons": [
 "healthy"
 ],
 "accountStatusChangedDateTime": "2020-08-21T10:45:48.063Z",
 "directDepositInformation": {
 "accountNumber": "101054832310000",
 "routingNumber": "096017400"
 },
 "purses": [
 {
 "purseIdentifier": "a6f639e3-895a-4d1c-bc66-01257f664000",
 "purseType": "primary",
 "availableBalance": 0.0000,
 "ledgerBalance": 0.0000,
 "availableBalanceAsOfDateTime": "2020-08-21T08:45:46Z",
 "ledgerBalanceAsOfDateTime": "2020-08-21T08:45:46Z",
54
 "isHidden": false,
 "status": "active"
 }
 ],
 "accountHolders": [
 {
 "paymentInstruments": [
 {
 "paymentIdentifier": "d6edfa3e-1444-4f66-a897-59639dc9dc56",
 "paymentInstrumentIdentifier": "562e0350-cd66-4bca-bae5-e9430d5b6736",
 "paymentInstrumentType": "virtual",
 "status": "activated",
 "isPinSet": true,
 "last4Pan": "9446",
 "activatedDateTime": "2020-08-21T10:45:46Z",
 "issuedDateTime": "2020-08-21T10:45:46Z",
 "isPrivateDataViewable": true
 },
 {
 "paymentIdentifier": "d6edfa3e-1444-4f66-a897-59639dc9dc56", //If a payment instrument 
was created
 "paymentInstrumentIdentifier": "0fae759c-a70d-44b9-a27d-cd2eb210d757",
 "paymentInstrumentType": "emv",
 "status": "notActivated",
 "isPinSet": true,
 "last4Pan": "9446",
 "issuedDateTime": "2020-08-21T10:45:47Z",
 "isPrivateDataViewable": false
 }
 ],
 "user": {
 "firstName": "Jane",
 "lastName": "Doe",
 "dobStatus": "matched",
 "last4Identity": "4029",
 "identityType": "ssn",
 "userIdentifier": "d60e9c65-988f-4e3d-9899-e3fae73f4d71",
 "peerTransferAcceptPreference": "manual",
 "status": "active",
 "isPrimaryAccountHolder": true,
 "kycStateData": {
 "ofacStatus": "passed",
 "kycStatus": "passed",
 "kycPendingGate": "healthy"
 }
 },
 "accountHolderIdentifier": "12e8ed12-e283-44d4-83bf-b7537b9cbc21"
 }
55
 ],
 "termsAcceptances": [
 {
 "termsIdentifier": "privPlcy",
 "termsAcceptanceDateTime": "2020-08-21T10:45:43.447Z",
 "termsAcceptanceFlag": “false”
 },
 {
 "termsIdentifier": "daa",
 "termsAcceptanceDateTime": "2020-08-21T10:45:43.447Z",
 "termsAcceptanceFlag": true
 },
 {
 "termsIdentifier": "eca",
 "termsAcceptanceDateTime": "2020-08-21T10:45:43.447Z",
 "termsAcceptanceFlag": true
 }
 ],
 "accountCycleDay": 21
 },
 "responseDetails": [
 {
 "code": 0,
 "subCode": 0,
 "description": "Success",
 "url": "http://tbd"
 }
 ]
}

							}</set-body>
						</return-response>
					</when>
					<when condition="@(context.Variables.GetValueOrDefault<bool>("isBadRequest"))">
						<return-response>
							<set-status code="400" reason="Bad Request" />
							<set-body>
{
   "success":true,
   "data":"Bad Request"
} </set-body>
						</return-response>
					</when>
					<when condition="@(context.Variables.GetValueOrDefault<bool>("isNotFound"))">
						<return-response>
							<set-status code="404" reason="Not Found" />
							<set-body>
{
   "success":true,
   "data":"Not Found"
} </set-body>
						</return-response>
					</when>
					<otherwise>
						<return-response>
							<set-status code="404" reason="Not Available" />
							<set-body>{
						 "success": true,
						 "data":"Is Not Available"</set-body>
						</return-response>
					</otherwise>
				</choose>
			</when>
		</choose>
	</inbound>
	<outbound>
		<base />
	</outbound>
	<backend>
		<base />
	</backend>
	<on-error>
		<base />
	</on-error>
</policies>